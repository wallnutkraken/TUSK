<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Markov</name>
    </assembly>
    <members>
        <member name="T:Markov.IRandom">
            <summary>
            Represents the interface for a device that produces a sequence of numbers that meet certain statistical requirements for randomness.
            </summary>
        </member>
        <member name="M:Markov.IRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes
            zero but not maxValue. However, if maxValue equals zero, maxValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than zero</exception>
        </member>
        <member name="T:Markov.RandomNumberGeneratorWrapper">
            <summary>
            Wraps an instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to provide the <see cref="T:Markov.IRandom"/> interface.
            </summary>
        </member>
        <member name="F:Markov.RandomNumberGeneratorWrapper.rand">
            <summary>
            Holds the instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> being wrapped.
            </summary>
        </member>
        <member name="M:Markov.RandomNumberGeneratorWrapper.#ctor(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Initializes a new instance of the RandomNumberGeneratorWrapper class, wrapping a given <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> instance.
            </summary>
            <param name="rand">The instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rand"/> is null.</exception>
        </member>
        <member name="M:Markov.RandomNumberGeneratorWrapper.Markov#IRandom#Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes
            zero but not maxValue. However, if maxValue equals zero, maxValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than zero</exception>
        </member>
        <member name="M:Markov.RandomNumberGeneratorWrapper.NextUlong">
            <summary>
            Reads sixty-four bits of data from the wrapped <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> instance, and converts them to a <see cref="T:System.UInt64"/>.
            </summary>
            <returns>A random <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="T:Markov.ChainState`1">
            <summary>
            Represents a state in a Markov chain.
            </summary>
            <typeparam name="T">The type of the constituent parts of each state in the Markov chain.</typeparam>
        </member>
        <member name="M:Markov.ChainState`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Markov.ChainState`1"/> class with the specified items.
            </summary>
            <param name="items">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items to be copied as a single state.</param>
        </member>
        <member name="M:Markov.ChainState`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Markov.ChainState`1"/> class with the specified items.
            </summary>
            <param name="items">A <see cref="T:T[]"/> of items to be copied as a single state.</param>
        </member>
        <member name="M:Markov.ChainState`1.op_Equality(Markov.ChainState{`0},Markov.ChainState{`0})">
            <summary>
            Determines whether two specified instances of <see cref="T:Markov.ChainState`1"/> are equal.
            </summary>
            <param name="a">A <see cref="T:Markov.ChainState`1"/>.</param>
            <param name="b">A <see cref="T:Markov.ChainState`1"/>.</param>
            <returns>true if <paramref name="a"/> and <paramref name="b"/> represent the same state; otherwise, false.</returns>
        </member>
        <member name="M:Markov.ChainState`1.op_Inequality(Markov.ChainState{`0},Markov.ChainState{`0})">
            <summary>
            Determines whether two specified instances of <see cref="T:Markov.ChainState`1"/> are not equal.
            </summary>
            <param name="a">A <see cref="T:Markov.ChainState`1"/>.</param>
            <param name="b">A <see cref="T:Markov.ChainState`1"/>.</param>
            <returns>true if <paramref name="a"/> and <paramref name="b"/> do not represent the same state; otherwise, false.</returns>
        </member>
        <member name="M:Markov.ChainState`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Markov.ChainState`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
        </member>
        <member name="M:Markov.ChainState`1.Equals(Markov.ChainState{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:Markov.MarkovChain`1">
            <summary>
            Builds and walks interconnected states based on a weighted probability.
            </summary>
            <typeparam name="T">The type of the constituent parts of each state in the Markov chain.</typeparam>
        </member>
        <member name="M:Markov.MarkovChain`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MarkovChain class.
            </summary>
            <param name="order">Indicates the desired order of the <see cref="T:Markov.MarkovChain`1"/>.</param>
            <remarks>
            <para>The <paramref name="order"/> of a generator indicates the depth of its internal state.  A generator
            with an order of 1 will choose items based on the previous item, a generator with an order of 2
            will choose items based on the previous 2 items, and so on.</para>
            <para>Zero is not classically a valid order value, but it is allowed here.  Choosing a zero value has the
            effect that every state is equivalent to the starting state, and so items will be chosen based on their
            total frequency.</para>
            </remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the items to the generator with a weight of one.
            </summary>
            <param name="items">The items to add to the generator.</param>
        </member>
        <member name="M:Markov.MarkovChain`1.Add(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Adds the items to the generator with the weight specified.
            </summary>
            <param name="items">The items to add to the generator.</param>
            <param name="weight">The weight at which to add the items.</param>
        </member>
        <member name="M:Markov.MarkovChain`1.Add(System.Collections.Generic.IEnumerable{`0},`0)">
            <summary>
            Adds the item to the generator, with the specified items preceding it.
            </summary>
            <param name="previous">The items preceding the item.</param>
            <param name="item">The item to add.</param>
            <remarks>
            See <see cref="M:Markov.MarkovChain`1.Add(System.Collections.Generic.IEnumerable{`0},`0,System.Int32)"/> for remarks.
            </remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Add(Markov.ChainState{`0},`0)">
            <summary>
            Adds the item to the generator, with the specified state preceding it.
            </summary>
            <param name="state">The state preceding the item.</param>
            <param name="next">The item to add.</param>
            <remarks>
            See <see cref="M:Markov.MarkovChain`1.Add(Markov.ChainState{`0},`0,System.Int32)"/> for remarks.
            </remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Add(System.Collections.Generic.IEnumerable{`0},`0,System.Int32)">
            <summary>
            Adds the item to the generator, with the specified items preceding it and the specified weight.
            </summary>
            <param name="previous">The items preceding the item.</param>
            <param name="item">The item to add.</param>
            <param name="weight">The weight of the item to add.</param>
            <remarks>
            This method does not add all of the preceding states to the generator.
            Notably, the empty state is not added, unless the <paramref name="previous"/> parameter is empty.
            </remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Add(Markov.ChainState{`0},`0,System.Int32)">
            <summary>
            Adds the item to the generator, with the specified state preceding it and the specified weight.
            </summary>
            <param name="state">The state preceding the item.</param>
            <param name="next">The item to add.</param>
            <param name="weight">The weight of the item to add.</param>
            <remarks>
            This adds the state as-is.  The state may not be reachable if, for example, the
            number of items in the state is greater than the order of the generator, or if the
            combination of items is not available in the other states of the generator.
            </remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.GetInitialStates">
            <summary>
            Gets the items from the generator that follow from an empty state.
            </summary>
            <returns>A dictionary of the items and their weight.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.GetNextStates(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the items from the generator that follow from the specified items preceding it.
            </summary>
            <param name="previous">The items preceding the items of interest.</param>
            <returns>A dictionary of the items and their weight.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.GetNextStates(Markov.ChainState{`0})">
            <summary>
            Gets the items from the generator that follow from the specified state preceding it.
            </summary>
            <param name="state">The state preceding the items of interest.</param>
            <returns>A dictionary of the items and their weight.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain">
            <summary>
            Randomly walks the chain.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
            <remarks>Assumes an empty starting state.</remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="previous">The items preceding the first item in the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Int32)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="seed">The seed for the random number generator, used as the random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
            <remarks>Assumes an empty starting state.</remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="previous">The items preceding the first item in the chain.</param>
            <param name="seed">The seed for the random number generator, used as the random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Random)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="rand">The random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
            <remarks>Assumes an empty starting state.</remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Collections.Generic.IEnumerable{`0},System.Random)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="previous">The items preceding the first item in the chain.</param>
            <param name="rand">The random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="rand">The random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
            <remarks>Assumes an empty starting state.</remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Collections.Generic.IEnumerable{`0},System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="previous">The items preceding the first item in the chain.</param>
            <param name="rand">The random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(Markov.IRandom)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="rand">The random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
            <remarks>Assumes an empty starting state.</remarks>
        </member>
        <member name="M:Markov.MarkovChain`1.Chain(System.Collections.Generic.IEnumerable{`0},Markov.IRandom)">
            <summary>
            Randomly walks the chain.
            </summary>
            <param name="previous">The items preceding the first item in the chain.</param>
            <param name="rand">The random number source for the chain.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the items chosen.</returns>
        </member>
        <member name="T:Markov.RandomWrapper">
            <summary>
            Wraps an instance of <see cref="T:System.Random"/> to provide the <see cref="T:Markov.IRandom"/> interface.
            </summary>
        </member>
        <member name="F:Markov.RandomWrapper.rand">
            <summary>
            Holds the instance of <see cref="T:System.Random"/> being wrapped.
            </summary>
        </member>
        <member name="M:Markov.RandomWrapper.#ctor(System.Random)">
            <summary>
            Initializes a new instance of the RandomWrapper class, wrapping a given <see cref="T:System.Random"/> instance.
            </summary>
            <param name="rand">The instance of <see cref="T:System.Random"/> to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rand"/> is null.</exception>
        </member>
        <member name="M:Markov.RandomWrapper.Markov#IRandom#Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes
            zero but not maxValue. However, if maxValue equals zero, maxValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than zero</exception>
        </member>
    </members>
</doc>
